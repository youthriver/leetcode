
import logging
logging.basicConfig(format='%(asctime)s - %(filename)s[%(lineno)d] - %(levelname)s:%(message)s', level=logging.DEBUG)

# 在二叉树中找到两个节点的最近公共祖先 中等
# 给定一棵二叉树(保证非空)以及这棵树上的两个节点对应的val值 o1 和 o2，请找到 o1 和 o2 的最近公共祖先节点。
# 数据范围：树上节点数满足 1 <= n <= 10^5, 节点值val满足区间 [0,n)
# 要求：时间复杂度O(n)
# 注：本题保证二叉树中每个节点的val值均不相同。
# 如当输入{3,5,1,6,2,0,8,#,#,7,4},5,1时，二叉树{3,5,1,6,2,0,8,#,#,7,4}如下图所示：, 所以节点值为5和节点值为1的节点的最近公共祖先节点的节点值为3，所以对应的输出为3。
# 节点本身可以视为自己的祖先
# 示例1: 输入：{3,5,1,6,2,0,8,#,#,7,4},5,1, 返回值：3
# 示例2: 输入：{3,5,1,6,2,0,8,#,#,7,4},2,7, 返回值：2


def demo():
    arr = []

if __name__ == '__main__':
    demo()